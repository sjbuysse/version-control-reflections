What happens when you initialize a repository? Why do you need to do it?
it adds a folder .git and a log and such 

How is the staging area different from the working directory and the repository? What value do you think it offers?
The working directory and repository are decoupled by the staging area.
The staging area is like a loading dock, that holds the elements of the working directory that will be saved to the repo.
It is usefull because sometimes you want to split up big changes into smaller changes. 
Or if you're working on something but then need to fix a small bug, you can commit JUST that bugfix 
instead of having to make a different branch. 

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
When adding new features, when fixing a bug, when you're doing something experimental, etc.
but want to keep a clean working production branch

How do the diagrams help you visualize the branch structure?
You can see which commits are part of which branch, and which commits are reachable from which branch
and which commits are unreachable

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
All the stuff that was added in either branches will be merged, and all the stuff that has been deleted in either branch 
will be deleted. 
conflicting actions (like edits on the same line) will need to be clarfied during or before the merge. 
if you have a conflict, you can alwasy abort the merge (git merge --abort), and fix the conflict.
We represent it in the diagram as if the 2 branches come together since 1 branch will be the result. 
